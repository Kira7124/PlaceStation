<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">




<mapper namespace="com.project3.placestation.repository.interfaces.MemberRepository">


	<!-- 일반회원명단출력 -->
	<select id="listAll"
		resultType="com.project3.placestation.repository.entity.Member">
		select * from member
		limit #{startPage},#{pageSize}
	</select>


	<!-- 페이징처리 갯수세팅 -->
	<select id="countMember" resultType="int">
			<![CDATA[ select count(*) from member where user_no > 0 ]]>
		</select>
		
		
		
		<!-- 회원정보 수정(관리자) -->
		<update id = "AdminUpdateMember">
			update member set user_name=#{username},user_address=#{useraddress},user_hp=#{userhp},file_path=#{filepath},
			user_email=#{useremail},grade=#{grade},user_id=#{userid}
			where user_no = #{userno}
		</update>
		
		
		<!-- 사진수정(관리자) -->
		<update id="AdminPhotoUpdate">
			update member set file_path=#{filepath}
			where user_no = #{userno}
		</update>
		
		
		
		<!-- 회원정보 삭제(관리자) -->
		<delete id ="AdminDeleteMember">
			delete from member where user_no=#{userno} and user_password=#{userpassword}
		</delete>
		
		
		
		<!-- 유저이름검색(관리자) -->
		<select id="searchMemberlist" resultType="com.project3.placestation.repository.entity.Member">
		    select * from member
		    <where>
		        <if test="searchKeyword != null and searchKeyword != ''">
		            <!-- Option 값에 따라 검색할 컬럼을 조건에 따라 선택 -->
		            <choose>
		            	<when test="searchOption == 'user_name'">
		                    and user_name like concat('%', #{searchKeyword}, '%')
		                </when>
		                <when test="searchOption == 'user_address'">
		                    and user_address like concat('%', #{searchKeyword}, '%')
		                </when>
		                <when test="searchOption == 'grade'">
		                    and grade like concat('%', #{searchKeyword}, '%')
		                </when>
		                <when test="searchOption == 'join_at'">
		                    and join_at like concat('%', #{searchKeyword}, '%')
		                </when>
		                <!-- 기본적으로는 user_name으로 검색 -->
		                <otherwise>
		                    and user_name like concat('%', #{searchKeyword}, '%')
		                </otherwise>
		            </choose>
		        </if>
		    </where>
		    limit #{startPage}, #{pageSize}
		</select>
		
		
		
		
		<!-- 관리자유저검색카운팅 -->
		<select id="countSearchMemberlist" resultType="int">
			 select count(*) from member
			    <where>
			        <if test="searchKeyword != null and searchKeyword != ''">
			            <!-- Option 값에 따라 검색할 컬럼을 조건에 따라 선택 -->
			            <choose>
				            <when test="searchOption == 'user_name'">
			                    and user_name like concat('%', #{searchKeyword}, '%')
			                </when>
			                <when test="searchOption == 'user_address'">
			                    and user_address like concat('%', #{searchKeyword}, '%')
			                </when>
			                <when test="searchOption == 'grade'">
			                    and grade like concat('%', #{searchKeyword}, '%')
			                </when>
			                <when test="searchOption == 'join_at'">
			                    and join_at like concat('%', #{searchKeyword}, '%')
			                </when>
			                <!-- 기본적으로는 user_name으로 검색 -->
			                <otherwise>
			                    and user_name like concat('%', #{searchKeyword}, '%')
			                </otherwise>
			            </choose>
			        </if>
			    </where>
		</select>
		

	<!-- 판매자 join 유저 -->
	<select id="SelectJoinBiz"
		resultType="com.project3.placestation.repository.entity.BizJoin">
		select biz_no as bizNo,
		b.biz_id as bizId,
		b.biz_brand_name
		as bizBrandName,
		b.imp_uid as impUid,
		b.imp_key as impKey,
		b.imp_secret
		as impSecret,
		m.user_password as userPassword,
		m.user_address as
		userAddress,
		m.user_name as userName,
		m.user_point as userPoint,
		m.join_at as joinAt,
		m.user_role as role,
		m.grade as userGrade,
		m.user_hp as userHp,
		m.user_email as userEmail ,
		m.file_path as
		filePath,
		b.biz_tel as bizTel
		from member as m
		join biz as b
		on m.user_no
		= b.biz_id
		where m.user_no = #{bizId};
	</select>

	<!-- 판매자 join 유저 -->
	<select id="findPasswordById"
		resultType="com.project3.placestation.biz.model.dto.ResPassword">
		select user_password as password from member
		where user_no =
		#{userNo}
	</select>


	<update id="BizUpdateMember">
		update member set
		user_name = #{accountDto.userName},
		user_address =
		#{accountDto.userAddress},
		user_hp = #{accountDto.userHp}
		<if test="accountDto.changeImage == 'Y'.toString()">
			,
			file_path = #{accountDto.filePath}
		</if>
		<if test="accountDto.changePassword == 'Y'.toString()">
			,
			user_password = #{accountDto.userPassword}
		</if>
		where user_no = #{userNo};
	</update>


	<!-- 이메일 유저 중복 검사 -->
	<select id="selecyByUserEmail"
		resultType="com.project3.placestation.repository.entity.Member">
		select * from member where user_email = #{email}
	</select>

  
  
	<!-- 판매자 유저 회원가입 -->
	<insert id="insertUser">
		insert into
		member(user_id,user_password,user_address,user_name, user_hp,
		user_email,join_at,user_role,gender,imp_uid,imp_secret, imp_key)
		values(#{userid},#{userpassword},#{useraddress},#{username},#{userhp},#{useremail},NOW(),#{userrole},#{gender},#{impuid},#{impsecret},#{impkey})
	</insert>

	<!-- 소셜 유저 회원가입 -->
	<insert id="insertOauthUser">
		insert into
		member(user_id,user_password,user_address,user_name, user_hp,
		user_email,join_at,user_role,gender,oauth)
		values(#{userid},#{userpassword},#{useraddress},#{username},#{userhp},#{useremail},NOW(),#{userrole},#{gender},#{oauth})
	</insert>

	<!-- 판매자 join 유저 -->
	<select id="findMemberById"
		resultType="com.project3.placestation.payment.model.dto.PaymentMemberDto">
		select user_no as userNo ,
		user_address as userAddress ,
		user_name as userName , user_hp as
		userHp , user_email as userEmail ,
		grade as userGrade , user_point as
		userPoint , join_at as joinAt ,
		user_role as userRole , gender as
		gender , file_path as filePath from member where user_no =
		#{userNo}
	</select>


	<!-- 중복id 체크용(관리자)  -->
	<select id ="AdminCheckID" resultType="Integer">
		select count(*) from member where user_id = #{userid}
	</select>

	<update id="updateMemberPoint">
		update member set
		user_point = #{userPoint} ,
		grade =
		#{grade}
		where user_no = #{buyerId}
	</update>


	<select id="selectByIsUserId"
		resultType="com.project3.placestation.repository.entity.Member">
		select * from member where user_id
		= #{uid}
	</select>


	<!-- (회원가입)유저 아이디 중복 검사 -->
	<select id="selectByValidUserId" resultType="Integer">
		select count(*) from
		member where
		user_id = #{uid}
	</select>

	<!-- (회원가입)전화번호 중복검사 -->
	<select id="selectByValidHp" resultType="Integer">
		select count(*) from
		member where
		user_hp = #{hp}
	</select>

	<!-- (회원가입)사업자 전화번호 중복검사 -->
	<select id="selectByValidManageHp">
		select count(*) from biz where
		biz_tel = #{managehp}
	</select>

	<!-- (회원가입)이메일 중복검사 -->
	<select id="selectByValidEmail">
		select count(user_email) from member where
		user_email
		= #{email}
	</select>

	<!-- (소셜 로그인)이메일 중복검사 -->
	<select id="selectByValidUserIdOauth" resultType="com.project3.placestation.repository.entity.Member">
		select * from member where
		user_id
		= #{uid}
	</select>

	<!-- (회원가입)유저 아이디 중복 검사 -->
	<select id="selectByValidUserNameOauth" resultType="com.project3.placestation.repository.entity.Member">
		SELECT *
    FROM member
    WHERE CONCAT(oauth, '', user_id) = #{uid}
	</select>

	<!-- 판매자 회원 가입용 selectKey userNo를 반환  [현재 사용하지 않는중] -->
	<insert id="insertUserAndSelectUserNo">
		<selectKey keyProperty="userNo" order="AFTER"
			resultType="com.project3.placestation.repository.entity.Member">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into
		member(user_id,user_password,user_address,user_name, user_hp,
		user_email,join_at,user_role,gender)
		values(#{userid},#{userpassword},#{useraddress},#{username},#{userhp},#{useremail},NOW(),#{userrole},#{gender})
	</insert>

	<!-- (판매자 회원가입) biz테이블 insert -->
	<insert id="insertBiz">
		insert into biz
		(biz_id, file_path)
		values(#{userno},#{filepath})

	</insert>


   <!-- (판매자 회원가입) userNo값 bizid 셋팅용 -->
 	<select id="selectByUserId" resultType="com.project3.placestation.repository.entity.Member">
 		select user_no from member where user_id = #{userid}
	</select>


	
	<!-- 유저사진변경하기 -->
	<update id="changePhoto">
			update member set file_path = #{filePath}
			where user_no = #{userno}
	</update>
	
	
	<!-- 유저사진변경 filepath 가져오기 -->
	<select id="selectUserUpdatePhoto" resultType="com.project3.placestation.repository.entity.Member">
			select * from member where user_no = #{userno}
	</select>
	

</mapper>

