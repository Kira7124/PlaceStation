<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.project3.placestation.repository.interfaces.ProdReviewRepository">

	<!-- 리뷰 등록 -->
	<insert id="addReview">
		insert into prod_review (prod_no , user_no ,
		prod_rev_content ,
		prod_rev_star)
		values (#{prodNo},
		#{userNo},#{prodRevContent},#{prodRevStar});
	</insert>

	<!-- 답글 등록 -->
	<insert id="saveReview">
		INSERT INTO prod_review (
		prod_no, prod_rev_content,
		prod_rev_star, user_no,
		parent_id
		) VALUES (
		#{prodNo},
		#{prodRevContent},
		#{prodRevStar}, #{userNo},
		#{parentId}
		)
	</insert>

	<!-- 리뷰 삭제 -->
	<update id="deleteReview">
		update prod_review SET
		prod_rev_delete_yn = 'Y',
		prod_rev_delete_at = NOW()
		WHERE prod_rev_no =
		#{prodRevNo} or parent_id
		= #{prodRevNo}
	</update>

	<!-- 상품 번호로 리뷰 불러오기 -->
	<select id="findByRevProdNoPaged">
		SELECT * FROM prod_review
		WHERE prod_rev_delete_yn =
		'N' AND prod_no = #{prod_no}
		ORDER BY prod_rev_no
		LIMIT #{offset},
		#{limit}
	</select>

	<!-- 리뷰 페이징 -->
	<select id="findRevNo">
		SELECT * FROM prod_review
		WHERE prod_rev_delete_yn =
		'N' AND prod_no = #{prod_no}
		ORDER BY prod_rev_no
		LIMIT #{offset},
		#{limit}
	</select>

	<!-- 리뷰 조회 -->
	<select id="findReviews" resultType="com.project3.placestation.repository.entity.ProdReview">
		SELECT p.prod_rev_no as prodRevNo ,
		p.prod_no as prodNo ,
		p.prod_rev_content as prodRevContent ,
		p.prod_rev_star as prodRevStar ,
		p.prod_rev_create_at as prodRevCreateAt ,
		p.user_no as userNo ,
		p.prod_rev_update_at as prodRevUpdateAt ,
		p.prod_rev_delete_yn as prodRevDeleteYn , 
		p.prod_rev_delete_at as prodRevDeleteAt , 
		p.parent_id as parentId,
		m.user_name as userName 
		, m.file_path as filePath FROM prod_review p
		left join member m
		on m.user_no = p.user_no
		WHERE prod_rev_delete_yn =
		'N' AND parent_Id IS NULL AND prod_no =
		#{prod_no}
		ORDER BY prod_rev_no
		DESC
		LIMIT #{offset}, #{limit}
	</select>

	<!-- 답글 조회 -->
	<select id="findReplies" resultType="com.project3.placestation.repository.entity.ProdReview">
		SELECT p.prod_rev_no as prodRevNo ,
		p.prod_no as prodNo ,
		p.prod_rev_content as prodRevContent ,
		p.prod_rev_star as prodRevStar ,
		p.prod_rev_create_at as prodRevCreateAt ,
		p.user_no as userNo ,
		p.prod_rev_update_at as prodRevUpdateAt ,
		p.prod_rev_delete_yn as prodRevDeleteYn , 
		p.prod_rev_delete_at as prodRevDeleteAt , 
		p.parent_id as parentId,
		 m.user_name as userName , m.file_path as filePath FROM prod_review p
		left join member m
		on m.user_no = p.user_no
		WHERE p.prod_rev_delete_yn = 'N' AND p.parent_Id
		IS NOT NULL AND prod_no =
		#{prod_no}
		ORDER BY p.prod_rev_no DESC;
	</select>

	<!-- 리뷰 개수 count -->
	<select id="countReview">
		SELECT COUNT(*) FROM prod_review WHERE prod_no =
		#{prodNo} AND
		prod_rev_delete_yn = 'N'
		and parent_id is null
	</select>

	<!-- 리뷰 평균 평점 -->
	<select id="avgStar">
		SELECT ROUND(AVG(prod_rev_star) , 1) FROM prod_review
		WHERE prod_no =
		#{prodNo} AND prod_rev_star != 0 AND prod_rev_delete_yn
		= 'N'
	</select>

	<!-- 유저 닉네임 조회 -->
	<select id="findUsername">
		SELECT user_name, file_path
		FROM member
		WHERE user_no =
		#{userNo}
	</select>
</mapper>